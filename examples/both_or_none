// for each position p: if a[p] is 1, set b[p] to 1, otherwise set it to zero.
// Prove that either both a[p] is 1 and b[p] is 1, or both a[p] is not 1 and b[p] is zero
// similar to https://github.com/sosy-lab/sv-benchmarks/blob/master/c/array-examples/standard_running_true-unreach-call.c
// but simplified

int [] a, b;
int i, length;

requires 0 <= length;

requires i == 0;

ensures forall int j, 0 <= j & j < length ==> ((a[j] == 1 & b[j] == 1) | (a[j] != 1 & b[j] == 0));

while (i < length) do
:: a[i] == 1 -> b[i] = 1; i = i + 1;
:: true      -> b[i] = 0; i = i + 1;
od